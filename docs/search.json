[
  {
    "objectID": "posts/first_post_beer_label/index.html",
    "href": "posts/first_post_beer_label/index.html",
    "title": "First Post: Beer Label",
    "section": "",
    "text": "This is my first post on this blog. The blog will focus on and data science using the R programming language, but I will also write about other things that I find interesting. One of these things are beer, more specifically brewing beer and what comes along with it. I have been brewing beer for a few years now and to make them feel more like the real deal, I like to design my own labels.\nIn this post I’ll share some R code for creating this map-style minimalist beer label:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis is a work in progress, check back in a few days for a more polished post!\n\n\nLet’s load some libraries:\ntidyverse is the metapackage to rule them all and includes a bunch of packages super useful for data wrangling. It also loads the wonderful magrittr pipe operator (%>%):love:\n\nlibrary(tidyverse) # The go-to library for basically doing anything in R nowadays\nlibrary(osmdata) # For downloading data from OpenStreetMap\nlibrary(sf) # For working with simple features, such as map stuff\n\nThis beer label will use the road layout for the city of Umeå in the north of Sweden. osmdata has some great functions for this. - getbb() returns the bounding box (coordinates of the 4 corners of a rectangle) associated with a geographical area. - opq() builds the database query. - add_osm_features() adds, you’ve guessed it, our desired features to the query. - osmdata_sf() Turns the results of the query into sf format.\nI’ll use highway features this time, but check Open Street Maps wiki for other features.\nI’ll separate the roads and streets into two sf classes to be able to draw them using different line widths on the label. The output of osmdata_sf() will contain more than we need, so we extract just the line features using purrr::pluck()\n\n#choose area\nbbx <- getbb(\"Umeå, Sweden\")\n\n# large roads\nroads <- bbx %>%\n  opq() %>%\n  add_osm_feature(\n    key = \"highway\",\n    value = c(\"motorway\", \"trunk\", \"primary\",\n              \"secondary\", \"tertiary\", \"motorway_link\",\n              \"trunk_link\", \"primary_link\", \"secondary_link\",\n              \"tertiary_link\")\n    ) %>%\n  osmdata_sf() %>% \n  pluck(\"osm_lines\") \n\n# small roads\nstreets <- bbx %>%\n  opq() %>%\n  add_osm_feature(\n    key = \"highway\",\n    value = c(\"residential\", \"living_street\", \"service\",\n              \"unclassified\", \"pedestrian\", \"footway\",\n              \"track\", \"path\")\n    ) %>%\n  osmdata_sf() %>% \n  pluck(\"osm_lines\") \n\nInthis case I made the map-part of the label have a circular shape, with its center being somewhere downtown Umeå. I’ll get the coordinates non-programmatically (lazy) from just right clicking in Google Maps. Google Maps and OSM use the same coordinate system and projection, so the data smoothly slips into the processing pipeline without any conversion. Happy days.\nSince this is “just” a beer label, I won’t bother too much about dealing with projections - I’ll stick to WGS84/ESPG4326 which should produce good enough visual results.\n\n# make a point that'll be the circle center\ncenter <- c(lat = \"63.82400114332574\", long = \"20.262895955922296\")\n\n# Buffer the point to make the actual circle\ncircle <- tibble(lat = center[\"lat\"], long = center[\"long\"]) %>%\n  st_as_sf(coords = c(\"long\", \"lat\"), crs = 4326) %>%\n  st_buffer(dist = 3500, nQuadSegs = 200)\n\nNow we populate the circle with some roadage:\n\nroads_in_circle <- st_intersection(circle, roads)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\nstreets_in_circle <- st_intersection(circle, streets)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\n\nAnd plot our simple beer label:\n\nggplot() +\n  geom_sf(data = streets_in_circle,\n          linewidth = 0.3,\n          colour = \"gray30\") +\n  geom_sf(data = roads_in_circle,\n          linewidth = 0.5,\n          colour = \"gray10\") +\n  labs(title = \"UmeIPA\",\n       caption = \"Northern Made | Dry-Hopped\") +\n  theme_void() +\n  theme(\n    plot.title = element_text(\n      family = \"mono\",\n      size = 30,\n      hjust = 0.5,\n      margin = margin(t = 10)\n    ),\n    plot.caption = element_text(\n      family = \"mono\",\n      size = 12,\n      hjust = 0.5,\n      margin = margin(b = 10)\n    )\n  )\n\n\n\n\nTo save it as an image, we may use:\n\nggsave(\"beer_label.png\", height = 6, width = 6, bg = \"white\")\n\nDoesn’t this make the hazy soup that stinks up your basement taste like what love feels like?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Christian Höök",
    "section": "",
    "text": "First Post: Beer Label\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Note\n\n\n\nThis page is currently being worked on. Check back in a few days and it’ll hopefully be neater! I kind of promise."
  },
  {
    "objectID": "about.html#about-this-blog-and-myself",
    "href": "about.html#about-this-blog-and-myself",
    "title": "About",
    "section": "About this blog (and myself)",
    "text": "About this blog (and myself)\nI am a PhD student working on leveraging machine learning (aka statistical modeling) to increase competitiveness for bio-based supply chains. It’s an exiting time to be researching"
  },
  {
    "objectID": "about.html#publications",
    "href": "about.html#publications",
    "title": "About",
    "section": "Publications",
    "text": "Publications"
  }
]