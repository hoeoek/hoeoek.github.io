---
layout: post
title:  "An OSINT approach to citizen audit"
categories: [api, umeå, osint, citizen audit]
author: Christian
date: "2023-03-23"
draft: true
---

[](citizen.jpg){fig-align="center" width="40%"}

In this post we will have a look at consuming some open data to try to get more enlightened about how a local municipality is run. Sweden is a fairly decent country when it comes to making sure taxpayer money are allocated properly, but every citizens should exercise their right to audit their government whenever possible! You know... just to keep them on their toes.

[Umeå has its own open REST API](https://opendata.umea.se/api) service where you can find all sorts of data about and from the municipality. It is very well structured and even has a lot of functionality to do some analysis right in the browser. Since we are in love with R, we will skip that and go straight for some .csv-files. I found a some datasets with incoming supplier invoices, which I thought would be an interesting subject for a swift exploratory data analysis.

Direct links to the .csv's: [2017](https://opendata.umea.se/api/explore/v2.1/catalog/datasets/leverantorsfakturor-2017/exports/csv?lang=en&timezone=Europe%2FStockholm&use_labels=true&delimiter=%3B), [2018](https://opendata.umea.se/api/explore/v2.1/catalog/datasets/leverantorsfakturor-2018/exports/csv?lang=en&timezone=Europe%2FStockholm&use_labels=true&delimiter=%3B), [2019](https://opendata.umea.se/api/explore/v2.1/catalog/datasets/leverantorsfakturor-2019/exports/csv?lang=en&timezone=Europe%2FStockholm&use_labels=true&delimiter=%3B), [2020](https://opendata.umea.se/api/explore/v2.1/catalog/datasets/leverantorsfakturor-2020/exports/csv?lang=en&timezone=Europe%2FStockholm&use_labels=true&delimiter=%3B), [2021](https://opendata.umea.se/api/explore/v2.1/catalog/datasets/leverantorsfakturor-2021/exports/csv?lang=en&timezone=Europe%2FStockholm&use_labels=true&delimiter=%3B), [2022](https://opendata.umea.se/api/explore/v2.1/catalog/datasets/leverantorsfakturor-2022/exports/csv?lang=en&timezone=Europe%2FStockholm&use_labels=true&delimiter=%3B)

## Exploring & cleaning the data:

Libraries:

```{r, eval=FALSE}
library(tidyverse)
```

```{r, include=FALSE}
library(tidyverse)
setwd("~/Documents/gitprojects/hoeoek.github.io/posts/citizen_audit")
theme_set(theme_minimal())
```

Reading and binding together the data into a tibble:

```{r}
invoices_raw <- 
  bind_rows(
    read.csv2("leverantorsfakturor-2017.csv"),
    read.csv2("leverantorsfakturor-2018.csv"),
    read.csv2("leverantorsfakturor-2019.csv"),
    read.csv2("leverantorsfakturor-2020.csv"),
    read.csv2("leverantorsfakturor-2021.csv"),
    read.csv2("leverantorsfakturor-2022.csv")
  ) %>% 
  
  # Use tibbles because they are awesome
  tibble() %>% 
  
  # clean variable names ( <3 janitor!)
  janitor::clean_names() %>% 
  
  # select variables of interest & proper classes
  transmute(
    across(c(financial_month, 
             verification_number),
           as.character),
    across(c(department,
             supplier,
             account_text), 
           as.factor),
    amount = as.numeric(amount))
```

identify any duplicates

```{r}
#| code-fold: true
invoices_raw %>% 
  filter(duplicated(.)) %>% nrow()
```

It turns out the dataset has some duplicate records. I'll put that in the "human error" box and move on, deleting the duplicates. We can also get rid of the `verification_number` variable.

Let's see what we're working with:

```{r}
#| code-fold: true
#| warning: false
invoices_clean <- 
  invoices_raw %>% 
  distinct() %>% 
  select(-verification_number)

invoices_clean %>% skimr::skim_without_charts()
  
```

Turns out, the municipality recieved almost 2 million invoices in these six years. That's quite impressive.

looking at `skimr` output, the invoice amounts looks wierd - let's plot it and take a look!

```{r}
#| fig-width: 3
invoices_clean %>% 
  ggplot(aes(amount))+
  geom_histogram(bins = 50) +
  scale_x_log10(label = scales::number_format()) +
  scale_y_continuous(labels = scales::number_format())
  
```
